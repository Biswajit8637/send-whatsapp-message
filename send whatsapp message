using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mail;
using System.Net.Mime;
using System.Reflection;
using System.Security.Authentication;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RouteMobileWhatsappBulk
{
    static class Program
    {
        public static string tokenno = "";
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Genralinfo();
            Application.Run(new Form1());
        }

        static void Genralinfo()
        {

            string keyname = System.Configuration.ConfigurationManager.AppSettings["actionname"].ToString();
            if (keyname.Contains("M"))
            {
                GetwhatsappdatabulkMAIL();
            }
            else
            {
                Getwhatsappdatabulkroutemobile();
            }

        }

        static async Task Getwhatsappdatabulkroutemobile()
        {
            SqlConnection con = null;
            try
            {
                string tokenno = await Generatetokenrouemobile();
                string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["AdminAppConnectionProd"].ToString();
                string keyname = System.Configuration.ConfigurationManager.AppSettings["actionname"].ToString();
                con = new SqlConnection(connectionString);
                for (var k = 0; k < 1000; k++)
                {
                    SqlCommand cmd = new SqlCommand("USP_WABA_Schedular", con);
                    // SqlCommand cmd = new SqlCommand("USP_WABA_Message_Schedular", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@PAGENO", 1);
                    cmd.Parameters.AddWithValue("@PAGESIZE", 1000);
                   // cmd.Parameters.AddWithValue("@Action", keyname);

                    if (con != null)
                    {
                        if (con.State == ConnectionState.Open)
                            con.Close();

                    }
                    con.Open();


                    using (SqlDataAdapter sda = new SqlDataAdapter())
                    {
                        cmd.Connection = con;
                        sda.SelectCommand = cmd;
                        using (DataTable ds = new DataTable())
                        {
                            sda.Fill(ds);
                            if (ds.Rows.Count > 0)
                            {

                                List<ObjectLIstUpdate> objupdate = ds.ToListof<ObjectLIstUpdate>();

                                var maxid = objupdate.Max(a => a.INTWABANO);
                                var minid = objupdate.Min(a => a.INTWABANO);
                                // Sendwhatsappbulkpdf(ds, con, keyname, maxid, minid, "");
                               // sendwhatsappbulkroutemobile(ds, con, keyname, maxid, minid, tokenno);
                                sendwhatsappbulkroutemobile(ds, con, keyname, maxid, minid, tokenno);


                            }
                            else
                            {
                                WriteToFile("No Record Found !");
                                break;

                            }

                        }
                    }
                    System.Threading.Thread.Sleep(5000);
                    //WriteToFile("Success for USM Conversion to List " + DateTime.Now.ToString());
                }
            }
            catch (Exception ex)
            {

                WriteToFile(ex.Message);

            }
            finally
            {
                if (con != null)
                {
                    if (con.State == ConnectionState.Open)
                        con.Close();
                }
                Killprocess();

            }


        }

        static async Task sendwhatsappbulkroutemobile(DataTable dt, SqlConnection con, string keyname, int maxid, int minid, string tokenno)
        {

            //string Whatsappkey = System.Configuration.ConfigurationManager.AppSettings["Whatsappkey"].ToString();
            // string WhatsappTempId = System.Configuration.ConfigurationManager.AppSettings["WhatsappTempId"].ToString();
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)(0xc0 | 0x300 | 0xc00);
            RemovetxtFileupload();
            string msg = "";
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Fileupload";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "\\Fileupload\\txtfile" + ".txt";
            //WriteToFileupload("phone,name,pdffile");
             WriteToFileupload("phone,name");

            foreach (DataRow data in dt.Rows)
            {
                // msg = data["vch_mobileNo"].ToString() + ",2023," + data["vch_FilePath"].ToString();
                msg = data["vch_mobileNo"].ToString() + "," + data["vch_FilePath"].ToString();
                WriteToFileupload(msg);

            }

            var message = @"{" +
          @"    ""phone"": ""{{phone}}""," +
           @"    ""enable_acculync"": ""true""," +
          @"    ""media"": {" +
          @"        ""type"": ""media_template""," +
          @"        ""template_name"": ""odisha_93""," +
          @"        ""lang_code"": ""en""," +
           //@"            ""header"": [" +
           //@"                {" +
           //@"                     ""document"": " +
           //  @"                     {""link"":""{{pdffile}}""}}]" +
           //@"                     {""link"":""{{pdffile}}""}}]," +
           //@"            ""body"": [" +
           //@"                {" +

           //@"                     ""text"":""{{name}}""}]" +

           @"        }}";

            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "https://apis.rmlconnect.net/wba/v2/upload?source=UI");
            request.Headers.Add("Authorization", tokenno);
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(File.OpenRead(filepath)), "file", "txtfile.txt");
            content.Add(new StringContent("txtfile.txt"), "filename");
            content.Add(new StringContent("text/plain"), "file_mimetype");

            content.Add(new StringContent(message), "message");
            //content.Add(new StringContent("generalized/personalised"), "campaign_type");
            content.Add(new StringContent("personalized"), "campaign_type");
            request.Content = content;
            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var campaign_id = JsonConvert.DeserializeObject<Dictionary<string, object>>(response.Content.ReadAsStringAsync().Result)["campaign_id"].ToString();
            if (campaign_id.Length == 0)
            {
                throw new AuthenticationException("API authentication failed.");
            }
            sendwhatsapproutemobile(campaign_id, maxid, minid, keyname, tokenno);

            // Console.WriteLine(await response.Content.ReadAsStringAsync());

            //WriteToFile(content + "ID :" + minid + " To" + maxid);



            //SqlCommand cmd = new SqlCommand();
            //if (keyname == "A") { cmd.CommandText = "update JunKT set bit_deletedflag=1,Dtm_Createddate=getdate() where INTWABANO between " + minid + " and " + maxid + ""; cmd.Connection = con; }





            cmd.ExecuteNonQuery();


        }

        static async Task<string> Generatetokenrouemobile()
        {
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)(0xc0 | 0x300 | 0xc00);



            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "https://apis.rmlconnect.net/auth/v1/login/");
            var content = new StringContent("{\r\n  \"username\":\"SAMS\",\r\n  \"password\":\"sam@123rml\"\r\n}\r\n", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();




            var _Authtoken = JsonConvert.DeserializeObject<Dictionary<string, object>>(response.Content.ReadAsStringAsync().Result)["JWTAUTH"].ToString();
            if (_Authtoken.Length == 0)
            {
                throw new AuthenticationException("API authentication failed.");
            }


            return _Authtoken;
        }

        static void GetwhatsappdatabulkMAIL()
        {
            SqlConnection con = null;
            try
            {

                string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ToString();
                string keyname = System.Configuration.ConfigurationManager.AppSettings["actionname"].ToString();
                string FromMailID = System.Configuration.ConfigurationManager.AppSettings["FromMailID"].ToString();
                string HostName = System.Configuration.ConfigurationManager.AppSettings["HostName"].ToString();
                string EPort = System.Configuration.ConfigurationManager.AppSettings["EPort"].ToString();
                string Prepath = System.Configuration.ConfigurationManager.AppSettings["FilePath"].ToString();
                string Apikey = System.Configuration.ConfigurationManager.AppSettings["Apikey"].ToString();

                con = new SqlConnection(connectionString);
                for (var j = 0; j < 1000; j++)
                {
                    SqlCommand cmd = new SqlCommand("USP_WABA_Schedular", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@PAGENO", 1);
                    cmd.Parameters.AddWithValue("@PAGESIZE", 1000);
                    cmd.Parameters.AddWithValue("@Action", keyname);

                    if (con != null)
                    {
                        if (con.State == ConnectionState.Open)
                            con.Close();

                    }
                    con.Open();



                    using (SqlDataAdapter sda = new SqlDataAdapter())
                    {
                        cmd.Connection = con;
                        sda.SelectCommand = cmd;
                        using (DataSet ds = new DataSet())
                        {
                            sda.Fill(ds);
                            if (ds.Tables.Count > 0)
                            {
                                Sendmailbulk(ds.Tables[0], con, HostName, FromMailID, EPort, "", Prepath, ds.Tables[1], Apikey, keyname);

                            }
                            else
                            {
                                WriteToFile("No Record Found !");
                                break;
                            }

                        }
                    }
                }
                //WriteToFile("Success for USM Conversion to List " + DateTime.Now.ToString());

            }
            catch (Exception ex)
            {

                WriteToFile(ex.Message);

            }
            finally
            {
                if (con != null)
                {
                    if (con.State == ConnectionState.Open)
                        con.Close();
                }
                Killprocess();

            }


        }

        static async Task sendwhatsapproutemobile(string campaign_id, int maxid, int minid, string keyname, string token)
        {

            SqlConnection con = null;
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ToString();

            con = new SqlConnection(connectionString);
            if (con != null)
            {
                if (con.State == ConnectionState.Open)
                    con.Close();

            }
            con.Open();


            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)(0xc0 | 0x300 | 0xc00);

            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "https://apis.rmlconnect.net/wba/v2/manage_campaign?debug=True&source=UI");
            request.Headers.Add("Authorization", token);
            var content = new StringContent("{\n    \"campaign_action\": \"start\",\n    \"campaign_id\": \"" + campaign_id + "\",\n    \"campaign_name\": \"demotestbulk\",\n    \"file_mimetype\": \"text/plain\",\n    \"filename\": \"txtfile.txt\",\n    \"payload\": {\n        \"type\": \"media_template\"\n    }\n}", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            //Console.WriteLine(await response.Content.ReadAsStringAsync());



            SqlCommand cmd = new SqlCommand();
            if (keyname == "A") { cmd.CommandText = "update JunKT1 set bit_deletedflag=1 where INTWABANO between " + minid + " and " + maxid + ""; cmd.Connection = con; }





            cmd.ExecuteNonQuery();


        }

        static void Sendmailbulk(DataTable DtMail, SqlConnection con, string Host, string Frommail, string Port, string Pwd, string path, DataTable Dtmailcontent, string Apikey, string keyname)
        {



            try
            {
                for (var i = 0; i < DtMail.Rows.Count; i++)
                {

                    MailMessage mailMsg = new MailMessage();

                    mailMsg.To.Add(DtMail.Rows[i]["vch_Email"].ToString());

                    // From 
                    mailMsg.From = new MailAddress(Frommail, "SAMS-Odisha");
                    string text = string.Empty;
                    string html = string.Empty;
                    if (DtMail.Rows[i]["mailType"].ToString() == "Y")
                    {
                        mailMsg.Subject = Dtmailcontent.Rows[0]["vch_subject"].ToString();

                        text = "Dear " + DtMail.Rows[i]["Name"].ToString() + "," + Environment.NewLine + "   Congratulations!  You have been selected in Pre-qualifying Entrance Examination to undergo the UPSC Free Service Coaching-2023. For more details please visit the SAMS (UPSC Civil Service Coaching) website. The guideline and timeline is attached herewith for your reference. " + Environment.NewLine + " Regads " + Environment.NewLine + "H.E. Deptt.," + Environment.NewLine + "Govt. of Odisha.";
                        html = "Dear " + DtMail.Rows[i]["Name"].ToString() + ",<br/>   Congratulations!  You have been selected in Pre-qualifying Entrance Examination to undergo the UPSC Free Service Coaching-2023. For more details please visit the SAMS (UPSC Civil Service Coaching) website. The guideline and timeline is attached herewith for your reference. <br/> Regads <br/>H.E. Deptt.,<br/>Govt. of Odisha.";
                        //text = Dtmailcontent.Rows[0]["vch_text"].ToString();
                        //html = Dtmailcontent.Rows[0]["vch_body"].ToString();

                        //text.Replace("@Applicant", DtMail.Rows[i]["Name"].ToString());
                        //html.Replace("@Applicant", DtMail.Rows[i]["Name"].ToString());

                    }
                    //else {
                    //    mailMsg.Subject = Dtmailcontent.Rows[1]["vch_subject"].ToString();

                    //    text = Dtmailcontent.Rows[1]["vch_text"].ToString();
                    //    html = Dtmailcontent.Rows[1]["vch_body"].ToString();
                    //}

                    mailMsg.AlternateViews.Add(AlternateView.CreateAlternateViewFromString(text, null, MediaTypeNames.Text.Plain));
                    mailMsg.AlternateViews.Add(AlternateView.CreateAlternateViewFromString(html, null, MediaTypeNames.Text.Html));
                    var bytes = File.ReadAllBytes(path + "\\" + DtMail.Rows[i]["vch_FilePath"].ToString());
                    var file = Convert.ToBase64String(bytes);
                    mailMsg.Attachments.Add(new Attachment(path + "\\" + DtMail.Rows[i]["vch_FilePath"].ToString()));

                    // Init SmtpClient and send
                    SmtpClient smtpClient = new SmtpClient(Host, Convert.ToInt32(Port));
                    System.Net.NetworkCredential credentials = new System.Net.NetworkCredential("apikey", Apikey);
                    smtpClient.Credentials = credentials;

                    smtpClient.Send(mailMsg);

                    SqlCommand cmd = new SqlCommand();

                    if (keyname == "M")
                    { cmd.CommandText = "update JunMailT set bit_deletedflag=1,Dtm_Createddate=getdate() where INTWABANO ='" + DtMail.Rows[i]["INTWABANO"].ToString() + "'"; cmd.Connection = con; }
                    if (keyname == "M1")
                    { cmd.CommandText = "update JunMailT1 set bit_deletedflag=1,Dtm_Createddate=getdate() where INTWABANO ='" + DtMail.Rows[i]["INTWABANO"].ToString() + "'"; cmd.Connection = con; }
                    if (keyname == "M2")
                    { cmd.CommandText = "update JunMailT2 set bit_deletedflag=1,Dtm_Createddate=getdate() where INTWABANO ='" + DtMail.Rows[i]["INTWABANO"].ToString() + "'"; cmd.Connection = con; }
                    if (keyname == "M3")
                    { cmd.CommandText = "update JunMailT3 set bit_deletedflag=1,Dtm_Createddate=getdate() where INTWABANO ='" + DtMail.Rows[i]["INTWABANO"].ToString() + "'"; cmd.Connection = con; }



                    //SqlCommand cmd = new SqlCommand("update JunKT set bit_deletedflag=1 where INTWABANO ='" + Id + "'", con);
                    cmd.ExecuteNonQuery();

                }
            }
            catch (Exception ex)
            {
                WriteToFile(ex.Message);

            }


        }

        static void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "\\Logs\\ServiceLogWhatsapp_" + DateTime.Now.Date.ToShortDateString().Replace('/', '_') + ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.   
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }

        static void RemovetxtFileupload()
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Fileupload";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "\\Fileupload\\txtfile" + ".txt";
            if (File.Exists(filepath))
            {
                File.WriteAllBytes(filepath, new byte[0]);
            }

        }



        static void WriteToFileupload(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Fileupload";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "\\Fileupload\\txtfile" + ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.   
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }

        static void Killprocess()
        {
            foreach (var process in Process.GetProcessesByName("WhatsappBulk"))
            {
                process.Kill();
            }
        }

        public class ObjectLIstUpdate
        {
            //[JsonProperty("@FROM")]
            public int INTWABANO { get; set; }

        }
        public static List<T> ToListof<T>(this DataTable dt)
        {
            const BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;
            var columnNames = dt.Columns.Cast<DataColumn>()
                .Select(c => c.ColumnName)
                .ToList();
            var objectProperties = typeof(T).GetProperties(flags);
            var targetList = dt.AsEnumerable().Select(dataRow =>
            {
                var instanceOfT = Activator.CreateInstance<T>();

                foreach (var properties in objectProperties.Where(properties => columnNames.Contains(properties.Name) && dataRow[properties.Name] != DBNull.Value))
                {
                    properties.SetValue(instanceOfT, dataRow[properties.Name], null);
                }
                return instanceOfT;
            }).ToList();

            return targetList;
        }
    }
}
================================================================================
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
	<connectionStrings>
		<add name="ConnectionString2" connectionString="Server=SERVER15V1;uid=SamSXIUG;pwd=sXIug$@m$2022;database=SAMSEngineUG;Timeout=100000000;Pooling=false;" providerName="System.Data.SqlClient"/>
		<add name="ConnectionString" connectionString="Data Source=SERVER15V1;uid=SamSXIUG;pwd=sXIug$@m$2022;database=SAMSEngineXII;Timeout=1000;Pooling=false" providerName="System.Data.SqlClient"/>

		<add name="ConnectionStringiti" connectionString="data source=server15\SQL17;uid=samsk;pwd=samsk@1;database=SAMS-SKILL;Timeout=1000;Pooling=false;Connect Timeout=1000000" providerName="System.Data.SqlClient"/>
		
	</connectionStrings>
	<appSettings>

		<!--for whatsapp-->
		<add key="actionname" value="A"/>
		<!--<add key="actionname" value="M"/>-->
		<!--for Content below Mail-->
		<add key="FromMailID" value="noreply@samsodisha.gov.in"/>
		<!--<add key="FromMailPWD" value="Odsams@123"/>-->
		<add key="HostName" value="smtp.sendgrid.net"/>

		<add key="WhatsappTempId" value="9700875~2023"/>


		<add key="Whatsappusername" value="samsodishawa"/>
		<add key="Whatsapppwd" value="8R*_iOcI2["/>


		<!--<add key="WhatsappTempId" value="84"/>-->
		<add key="EPort" value="587"/>
		<add key="Apikey" value="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"/>
		<!--<add key="Whatsappkey" value="eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5teXZhbHVlZmlyc3QuY29tL3BzbXMiLCJzdWIiOiJzYW1zb2Rpc2hhd2EiLCJleHAiOjE2NjMzNDI0MTJ9.IsgyiWOnrp_4A7KtoPIkq6FYNGjfKeliUMA2rlLwN70"/>-->
		<add key="Whatsappkey" value="eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5teXZhbHVlZmlyc3QuY29tL3BzbXMiLCJzdWIiOiJzYW1zb2Rpc2hhd2EiLCJleHAiOjE2Njk1NDMzNTZ9.J4XLHBEqdmERT5jojIONrAHFzXIzUiIJm6UKo0kPoNA"/>

		<add key="FilePath" value="\\server8\sams\SAMS\SAMS_DOCS"/>



	</appSettings>
</configuration>
